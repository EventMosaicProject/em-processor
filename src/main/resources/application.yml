spring:
  application:
    name: ${SERVICE_NAME:em-processor}

  docker:
    compose:
      enabled: ${DOCKER_COMPOSE_ENABLED:false}


  # Конфигурация Redis
  data:
    redis:
      host: ${SPRING_DATA_REDIS_HOST:redis}
      port: ${SPRING_DATA_REDIS_PORT:6379}
      password: ${SPRING_DATA_REDIS_PASSWORD:passw0rd}
      timeout: 2000
      database: ${SPRING_DATA_REDIS_DATABASE:0}                                               # Номер БД Redis
      client-name: ${SPRING_DATA_SERVICE_NAME:em-processor}-redis-client                      # Имя клиента для идентификации в Redis


  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all                                                                               # Подтверждение всех реплик (все брокеры должны подтвердить запись сообщения)
      properties:
        enable.idempotence: true                                                              # Включаем идемпотентность (для предотвращения дублирования сообщений)
        max.in.flight.requests.per.connection: 5                                              # Максимальное количество запросов в очереди на одно соединение
        retries: 3                                                                            # Количество попыток повторной отправки сообщения в случае ошибки
    consumer:
      group-id: ${spring.application.name}-group
      auto-offset-reset: earliest                                                             # Сброс на самый старый offset при отсутствии состояния группы
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        isolation.level: read_committed                                                       # Уровень изоляции для чтения (только подтвержденные изменения)
        spring.json.trusted.packages: com.neighbor.eventmosaic.library.common.dto             # Доверенные пакеты для десериализации


server:
  port: ${SERVER_PORT:8080}


management:
  server:
    port: ${ACTUATOR_PORT:8081}
  endpoints:
    web:
      exposure:
        include: ${ACTUATOR_ENDPOINTS:health,info,metrics,prometheus}                           # Список доступных эндпоинтов
  metrics:
    tags:
      application: ${spring.application.name}                                                   # Имя приложения для метрик
    distribution:
      percentiles-histogram:
        http.server.requests: true                                                              # Гистограмма для метрик HTTP-запросов
  tracing:
    sampling:
      probability: 1.0                                                                          # Трейсинг для всех запросов
  endpoint:
    health:
      show-details: ${HEALTH_DETAILS_VISIBLE:always}                                            # Детализация информации о здоровье сервиса


eureka:
  client:
    register-with-eureka: ${EUREKA_REGISTER_ENABLED:true}                                       # Регистрируем сервис в Eureka
    fetch-registry: ${EUREKA_FETCH_ENABLED:true}                                                # Загружаем список зарегистрированных сервисов
    serviceUrl:
      defaultZone: ${EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE:http://em-discovery:8761/eureka/}   # URL-адрес реестра Eureka
  instance:
    prefer-ip-address: ${EUREKA_PREFER_IP:false}                                                # Используем хостнейм вместо IP
    instance-id: ${EUREKA_INSTANCE_HOSTNAME:em-processor}:${server.port}:${random.uuid}         # Уникальный идентификатор инстанса
    lease-renewal-interval-in-seconds: ${EUREKA_HEARTBEAT_INTERVAL:30}                          # Частота отправки heartbeat
    lease-expiration-duration-in-seconds: ${EUREKA_LEASE_EXPIRATION:90}                         # Время, через которое инстанс будет считаться недоступным
    status-page-url: http://${GATEWAY_PUBLIC_HOSTNAME:localhost}:${GATEWAY_PUBLIC_PORT:8080}/processor/actuator
    health-check-url: http://${GATEWAY_PUBLIC_HOSTNAME:localhost}:${GATEWAY_PUBLIC_PORT:8080}/processor/actuator/health


# Настройки повторных попыток
retry:
  max-retry-attempts: ${RETRY_MAX_ATTEMPTS:3}
  retry-interval-milliseconds: ${RETRY_INTERVAL:1000}

# Топики Kafka
kafka:
  topic:
    consumer:
      adapter-event: ${KAFKA_TOPIC_ADAPTER_EVENT:gdelt-adapter-event-topic}
      adapter-mention: ${KAFKA_TOPIC_ADAPTER_MENTION:gdelt-adapter-mention-topic}
    producer:
      processor-event: ${KAFKA_TOPIC_PROCESSOR_EVENT:gdelt-processor-event-topic}
      processor-mention: ${KAFKA_TOPIC_PROCESSOR_MENTION:gdelt-processor-mention-topic}
    dlq-connect:
      event:
        name: ${KAFKA_TOPIC_DLQ_CONNECT_EVENT_NAME:dlq-gdelt-event-topic}
        partitions: ${KAFKA_TOPIC_DLQ_CONNECT_EVENT_PARTITIONS:3}
        replicas: ${KAFKA_TOPIC_DLQ_CONNECT_EVENT_REPLICAS:1}
      mention:
        name: ${KAFKA_TOPIC_DLQ_CONNECT_MENTION_NAME:dlq-gdelt-mention-topic}
        partitions: ${KAFKA_TOPIC_DLQ_CONNECT_MENTION_PARTITIONS:3}
        replicas: ${KAFKA_TOPIC_DLQ_CONNECT_MENTION_REPLICAS:1}

# Настройки обработки батчей
batch:
  processing:
    window-duration-ms: ${BATCH_PROCESSING_WINDOW_MS:60000}                                     # Время ожидания батча (1 минута по умолчанию)